const Usuario = require('../model/Usuario'); // Ajusta la ruta segÃºn tu estructura

// Crear usuario
const crearUsuario = async (req, res) => {
    try {
        const usuario = new Usuario(req.body);
        await usuario.save();
        res.status(201).send(usuario);
    } catch (error) {
        res.status(400).send(error);
    }
};

// Obtener todos los usuarios
const obtenerUsuarios = async (req, res) => {
    try {
        const usuarios = await Usuario.find();
        res.status(200).send(usuarios);
    } catch (error) {
        res.status(500).send(error);
    }
};

// Obtener usuario por ID
const obtenerUsuarioPorId = async (req, res) => {
    try {
        const usuario = await Usuario.findById(req.params.id);
        if (!usuario) return res.status(404).send('Usuario no encontrado');
        res.status(200).send(usuario);
    } catch (error) {
        res.status(500).send(error);
    }
};

// Actualizar usuario
const actualizarUsuario = async (req, res) => {
    try {
        const usuario = await Usuario.findByIdAndUpdate(req.params.id, req.body, { new: true });
        if (!usuario) return res.status(404).send('Usuario no encontrado');
        res.status(200).send(usuario);
    } catch (error) {
        res.status(500).send(error);
    }
};

// Eliminar usuario
const eliminarUsuario = async (req, res) => {
    try {
        const usuario = await Usuario.findByIdAndDelete(req.params.id);
        if (!usuario) return res.status(404).send('Usuario no encontrado');
        res.status(200).send('Usuario eliminado');
    } catch (error) {
        res.status(500).send(error);
    }
};

// Obtener usuarios paginados
const obtenerUsuariosPaginados = async (req, res) => {
    try {
        const pagina = parseInt(req.params.pagina) || 1;
        const limite = parseInt(req.params.limite) || 10;
        const skip = (pagina - 1) * limite;

        const usuarios = await Usuario.find()
            .sort({ name: 1 }) // Puedes cambiar el campo de orden
            .skip(skip)
            .limit(limite);

        const totalUsuarios = await Usuario.countDocuments();
        const totalPaginas = Math.ceil(totalUsuarios / limite);

        res.status(200).json({
            usuarios,
            paginaActual: pagina,
            totalUsuarios,
            totalPaginas,
        });
    } catch (error) {
        res.status(500).send(error);
    }
};

module.exports = {
    crearUsuario,
    obtenerUsuarios,
    obtenerUsuarioPorId,
    actualizarUsuario,
    eliminarUsuario,
    obtenerUsuariosPaginados
};
